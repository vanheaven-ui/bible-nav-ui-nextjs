generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Users table (manual signup + Google OAuth)
model User {
  id            String     @id @default(cuid())
  username      String?    @unique
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  favorites     Favorite[]
  notes         Note[]
  sessions      Session[]
}

/// OAuth Accounts (Google, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// NextAuth Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Email Verification tokens (NextAuth optional)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Notes for verses
model Note {
  id        String   @id @default(cuid())
  userId    String
  book      String
  chapter   Int
  verse     Int
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Favorite verses
model Favorite {
  id          String   @id @default(cuid())
  userId      String
  book        String
  chapter     Int
  verseNumber Int
  verseText   String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
